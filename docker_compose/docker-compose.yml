version: '3.5'
services:

  postgres:
    image: syntelesis-postgres
    build:
      context: postgres
      dockerfile: Dockerfile-postgres
    ports:
     - "5432:5432"
    volumes:
     - type: volume
       source: data_postgres
       target: /var/lib/postgresql/data
    networks:
     - syntelesis-network
    environment:
     - POSTGRES_USER=${POSTGRES_USER}
     - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
     - POSTGRES_DB=${POSTGRES_DB}

  rabbitmq:
    image: syntelesis-rabbitmq
    build:
      context: rabbitmq
      dockerfile: Dockerfile-rabbitmq
    ports:
     - "15672:15672"
     - "5672:5672"
     - "1885:1885"
       # - "1883:1883"
    volumes:
     - type: volume
       source: data_rabbitmq
       target: /var/lib/rabbitmq/mnesia
    networks:
     - syntelesis-network
    environment:
       #     - RABBITMQ_ERL_COOKIE=${RABBITMQ_ERL_COOKIE}
       #     - RABBITMQ_USERNAME=${RABBITMQ_USERNAME}
       #     - RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD}
       #     - RABBITMQ_VHOST="/"
     - RABBITMQ_ADMIN=${RABBITMQ_ADMIN}
     - RABBITMQ_ADMIN_PASSWORD=${RABBITMQ_ADMIN_PASSWORD}
     - MQTT_BRIDGE=SYNAISTHISI_bridge

  rdf4j:
    image: syntelesis-rdf4j
    build:
      context: rdf4j
      dockerfile: Dockerfile-rdf4j
    ports:
     - 8083:8083
     - 8444:8443
    networks:
     - syntelesis-network

  # In DEV mode coment out all flask service
  flask:
    image: syntelesis-flask-app
    build:
     context: flask_app
     dockerfile: Dockerfile-flask
    volumes:
            # - 'app_log:/code/log'
            # - ./log:/code/log
     - type: volume
       source: app_log
       target: /code/log
     - type: volume
       source: services_repo
       target: /code/services
     - /var/run/docker.sock:/var/run/docker.sock
     - ./shared:/shared
    networks:
     - syntelesis-network
    environment:
      # Production/Development
     - APP_ENV=Production
     - POSTGRESQL_HOST=postgres
     - POSTGRESQL_PORT_NUMBER=${POSTGRESQL_PORT}
     - SYNTELESIS_DATABASE_USER=${SYNTELESIS_DATABASE_USER}
     - SYNTELESIS_DATABASE_PASSWORD=${SYNTELESIS_DATABASE_PASSWORD}
     - SYNTELESIS_DATABASE_NAME=${SYNTELESIS_DATABASE_NAME}
     - RABBITMQ_ENABLE=True
     - RABBITMQ_HOST=rabbitmq
     - RABBITMQ_BRIDGE_EXCHANGE=amq.topic
     - RABBITMQ_ADMIN=${RABBITMQ_ADMIN}
     - RABBITMQ_PSWD=${RABBITMQ_ADMIN_PASSWORD}
     - ONTOLOGY_SERVER=rdf4j
     - BROKER=ponte  
     - CONTAINER_NETWORK=syntelesis-network

  ponte:
    image: syntelesis-ponte
    build:
      context: ponte
      dockerfile: Dockerfile-ponte
    networks:
     - syntelesis-network
    volumes:
     - ./log:/var/log/
    ports:
     - "3000:3000"
     #- "8883:8883"
     - "1883:1883"
     - "5683:5683/udp"
    environment:
     - RABBITMQ=rabbitmq
    # In DEV mode use your host ip and flask dev port 5000
     - FLASK_APP=nginx
     - FLASK_PORT=${FLASK_PORT}
    depends_on:
    # In DEV mode comment out flask and nginx dependencies
     - flask
     - nginx
     - rabbitmq

  om2m:
    image: syntelesis-om2m
    build: 
      context: om2m
      dockerfile: Dockerfile-om2m
    ports:
     - "8081:8080"
    networks:
     - syntelesis-network
    depends_on:
     - ponte
     - rabbitmq

  # In DEV mode coment out all nginx  service
  nginx:
    image: syntelesis-nginx
    build:
      context: nginx
      dockerfile: Dockerfile-nginx
    networks:
     - syntelesis-network
    ports:
            #- 5000:80
      - "80:80"
      - "443:443"
    depends_on:
     - flask

  nodered:
    image: syntelesis-nodered
    build:
      context: nodered
      dockerfile: Dockerfile-nodered
    ports:
     - "1880:1880"
    environment:
     - RABBITMQ=rabbitmq
    # In DEV mode use your host ip and flask dev port 5000
     - FLASK_APP=nginx
     - FLASK_PORT=${FLASK_PORT}
    networks:
     - syntelesis-network
    depends_on:
     - flask

volumes:
  data_postgres:
    driver: local
  data_rabbitmq:
    driver: local
  app_log:
    driver: local
  services_repo:
    driver: local

networks:
  syntelesis-network:
    name: syntelesis-network
    driver: bridge
