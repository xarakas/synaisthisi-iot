# sevangelou - limit_req_zone is the rate limiter -> loginlimit: 10m is 10mb which is around 160.000 IPs, rate is the request rate per IP
limit_req_zone $binary_remote_addr zone=loginlimit:10m rate=1r/s;

# sevangelou - we map the content type to cache expiration configs. -5d is negative so it's not cached. max means max time of caching.
# thus here i cache for max time css and images and everything else is not cached
map $sent_http_content_type $expires {
  default                    -5d;
  text/css                   max;
  ~image/                    max;
}

server {
    listen 80;
    return 301 https://$host$request_uri; # sevangelou - change http requests to https
} 

server { # sevangelou - the https nginx serve
  listen 443 ssl;
  ssl_certificate     /etc/ssl/cert.crt; # sevangelou - get crt and private key from these dirs
  ssl_certificate_key /etc/ssl/key.key;
  ssl_protocols       TLSv1.2 TLSv1.3; # sevangelou - only safe tls versions
  server_name localhost;
  root /usr/share/nginx/html;

  expires $expires; # sevangelou - apply the cache control rules

  location / {     
    try_files $uri @app;
   }
  location @app {
    include uwsgi_params;
    uwsgi_pass flask:5000;
    uwsgi_read_timeout 1800s;
    uwsgi_connect_timeout 1800s;
    uwsgi_send_timeout 1800s;
    #uwsgi_request_buffering off;
    #uwsgi_buffering off;
    #proxy_read_timeout 1800s;
    #proxy_connect_timeout 1800s;
    #proxy_request_buffering off;
    #proxy_buffering off;
    #proxy_redirect off;

    # SECURITY HEADERS
    add_header X-Content-Type-Options nosniff; # no MIME sniffing
    add_header X-Frame-Options "DENY"; # no Clickjacking

    set $cors '';
    # exclude from cors protection:
    #  * localhost, as mobile ionic app executes from localhost:8080
    #  * 192.168.1.* for intranet debuging reasons 
    if ($http_origin ~ '^https?://(127.0.0.1:*|localhost|192.168.1.*)') {
        set $cors 'true';
    }

    if ($cors = 'true') {
        add_header 'Access-Control-Allow-Origin' "$http_origin" always;
        add_header 'Access-Control-Allow-Credentials' 'true' always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
        add_header 'Access-Control-Allow-Headers' 'Accept,Authorization,Cache-Control,Content-Type,DNT,If-Modified-Since,Keep-Alive,Origin,User-Agent,X-Requested-With' always;
        # required to be able to read Authorization header in frontend
        #add_header 'Access-Control-Expose-Headers' 'Authorization' always;
        # SECURITY HEADERS
        add_header X-Content-Type-Options nosniff; # sevangelou - no MIME sniffing
        add_header X-Frame-Options "DENY"; # sevangelou - no Clickjacking
    }
   

    if ($request_method = 'OPTIONS') {
        # Tell client that this pre-flight info is valid for 20 days
        add_header 'Access-Control-Max-Age' 1728000;
        add_header 'Content-Type' 'text/plain charset=UTF-8';
        add_header 'Content-Length' 0;
        add_header 'Access-Control-Allow-Origin' "$http_origin" always;
        add_header 'Access-Control-Allow-Credentials' 'true' always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
        add_header 'Access-Control-Allow-Headers' 'Accept,Authorization,Cache-Control,Content-Type,DNT,If-Modified-Since,Keep-Alive,Origin,User-Agent,X-Requested-With' always;
        # SECURITY HEADERS
        add_header X-Content-Type-Options nosniff; # sevangelou - no MIME sniffing
        add_header X-Frame-Options "DENY"; # sevangelou - no Clickjacking
        # required to be able to read Authorization header in frontend
        #add_header 'Access-Control-Expose-Headers' 'Authorization' always;
        return 204;
    }
  }

  # sevangelou - example of applying the rate limiting rules in the /login endpoint
  location /login {
    limit_req zone=loginlimit;
    try_files $uri @app;
  }

  client_max_body_size 10m; 
}
